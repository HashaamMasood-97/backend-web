// Users login Signup API's
 //Fetching all the accounts
 homeMedicRoutes.route('/api/account/signup/get').get(function(req, res){
  UserSchema.find(function(err, homemedic){
       if(err){
         console.log(err); 
}
        else{
          res.json(homemedic);
}
   });
});

homeMedicRoutes.route('/api/account/signup/:id').get(function(req,res){
  let id=req.params.id  //accessing parameter for url
  UserSchema.findById(id,function(err, homemedics){

     res.json(homemedics);

  });
});

//deleting the accounts from database
homeMedicRoutes.route('/api/account/delete/:id').delete(function(req, res) {
  let id = req.params.id;
  UserSchema.findByIdAndDelete(id, function(err) {
      if (!err) {
          res.sendStatus(200);
      } else {
          res.status(500).json({
              error: err
          })
      }
  });
});




 //SIGN UP
 homeMedicRoutes.route('/api/account/signup').post(function(req, res) {
    const { body } = req;
    const {
       firstName,
       lastName,
       contact, 
       gender,    
       password } = body;
                let {
                    email
                }=body;

      if(!firstName){
        return res.send({
            success: false,
            message: 'Error: first name cannot be blank.'
          });  
 
       }

       if(!lastName){
        return res.send({
            success: false,
            message: 'Error: first name cannot be blank.'
          });  
      }


    if (!email) {
      return res.send({
        success: false,
        message: 'Error: Email cannot be blank.'
      });
    }
    if (!password) {
      return res.send({
        success: false,
        message: 'Error: Password cannot be blank.'
      });
    }
 
       console.log('here');

    email = email.toLowerCase();
    email = email.trim();
    // Steps:
    // 1. Verify email doesn't exist
    // 2. Save
    UserSchema.find({
      email: email
    }, (err, previousUsers) => {
      if (err) {
        return res.send({
          success: false,
          message: 'Error: Server error'
        });
      } else if (previousUsers.length > 0) {
        return res.send({
          success: false,
          message: 'Error: Account already exist.'
        });
      }
      // Save the new user
      const newUser = new UserSchema();
      newUser.firstName=firstName;
      newUser.lastName=lastName;
      newUser.email = email;
      newUser.password = newUser.generateHash(password);
      newUser.contact=contact;
      newUser.gender=gender;
      newUser.save((err, user) => {
        if (err) {
          return res.send({
            success: false,
            message: 'Error: Server error'
          });
        }
        return res.send({
          success: true,
          message: 'Signed up'
        });
      });
    });
  }); // end of sign up endpoint

  
  //signin
  homeMedicRoutes.route('/api/account/signin').post(function(req, res) {
    const { body } = req;
    const {
      password
    } = body;
    let {
      email
    } = body;
    if (!email) {
      return res.send({
        success: false,
        message: 'Error: Email cannot be blank.'
      });
    }
    if (!password) {
      return res.send({
        success: false,
        message: 'Error: Password cannot be blank.'
      });
    }
    email = email.toLowerCase();
    email = email.trim();
    UserSchema.find({
      email: email    
    }, (err, users) => {
      if (err) {
        console.log('err 2:', err);
        return res.send({
          success: false,
          message: 'Error: server error'
        });
      }
      if (users.length != 1) {
        return res.send({
          success: false,
          message: 'Error: Invalid Email'
        });
      }
      const user = users[0];
      if (!user.validPassword(password)) {
        return res.send({
          success: false,
          message: 'Error: Invalid password'
        });
      }
      // Otherwise correct user
      const userSession = new UserSessionSchema();
      userSession.userId = user._id;
      userSession.save((err, doc) => {
        if (err) {
          console.log(err);
          return res.send({
            success: false,
            message: 'Error: server error'
          });
        }
        return res.send({
          success: true,
          message: 'Valid sign in',
          token: doc._id
        });
      });
    });
  });

  //verify
  homeMedicRoutes.route('/api/account/verify').get (function(req, res){
    // Get the token
    const { query } = req;
    const { token } = query;
    // ?token=test
    // Verify the token is one of a kind and it's not deleted.
    UserSessionSchema.find({
      _id: token,
      isDeleted: false
    }, (err, sessions) => {
      if (err) {
        console.log(err);
        return res.send({
          success: false,
          message: 'Error: Server error'
        });
      }
      if (sessions.length != 1) {
        return res.send({
          success: false,
          message: 'Error: Invalid'
        });
      } else {
        // DO ACTION
        return res.send({
          success: true,
          message: 'Good'
        });
      }
    });
  });

//logout
  homeMedicRoutes.route('/api/account/logout').get(function(req, res) {
    // Get the token
    const { query } = req;
    const { token } = query;
    // ?token=test
    // Verify the token is one of a kind and it's not deleted.
    UserSessionSchema.findOneAndUpdate({
      _id: token,
      isDeleted: false
    }, {
      $set: {
        isDeleted:true
      }
    }, null, (err, sessions) => {
      if (err) {
        console.log(err);
        return res.send({
          success: false,
          message: 'Error: Server error'
        });
      }
      return res.send({
        success: true,
        message: 'Good'
      });
    });
  });

// till here